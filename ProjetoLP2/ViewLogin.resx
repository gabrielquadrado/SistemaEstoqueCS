<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAEAIABoBAAANgAAACAgAAABAAgAqAgAAJ4EAAAwMAAAAQAIAKgOAABGDQAAKAAAABAA
        AAAgAAAAAQAgAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAP///wA2ndn/MZnY/yyU1/8okNb/I4zV/x6I
        1P8ahNP/FYDS/xF80f8OedH/CnbQ/wdzz/8EcM//AW7O/////wD///8APaPa/7zr+v+86/z/v+7+/8b0
        ///O+P//0/r//9D4///H8v//uun8/7Pk+f+w4vj/sOL4/wVxz/////8A////AEOo2/+/7Pv/Wc/1/0Gw
        7P9Ouu//WsLv/2DG7/9cxO//TLbv/zel5v8qmuH/OLju/7Hj+P8JddD/////AP///wBJrdz/we77/1/T
        9/9s2/z/f+X//4/t//+X8v//k+3//3zf//9bzPj/Rr7v/zy67v+z4/n/DnnR/////wD///8ATrLd/8Pv
        +/9l1vj/TLbs/1q97/+V6///MJfd/02Cq/+E4f//Qanp/zKf4f9Cvu//tOX5/xN+0v////8A////AFO3
        3v/G8Pz/atn4/3zi/f+Q6P//men//zKf3/9Ui7L/iuL//2rQ+f9QxfH/RsHw/7bn+f8Yg9P/////AP//
        /wBYu9//x/H8/2/c+f9Wu+3/Yb3v/5vn//81puL/S6Th/5Di//9Jren/OKTj/0nE8P+46Pn/HojU////
        /wD///8AXL/g/8jz/P913/n/ieb9/5Xn//+a5f//qu7//6jt//+Z4///dNX5/1nM8/9PyPH/u+n6/ySN
        1f////8A////AGDC4f/J8/z/y/P9/9T2/v/X9v//2PT//+D4///f+P//2vX//83x/P/C7fr/vev6/73r
        +v8rk9b/////AP///wBhw+H/iKCo/5GRkf+Ojo7/Wrnc/1W43/9Rtd7/TbHd/0mt3P9GqNf/eHh4/3Z2
        dv9lfo3/MZnY/////wD///8A////AJmZmcPGxsb/lJSU/4+Pjwj///8A////AP///wD///8Afn5+CH19
        ff+rq6v/dnZ2w////wD///8A////AP///wCdnZ2uxMTE/6Ghof+Tk5Mp////AP///wD///8A////AIKC
        gimJiYn/qamp/3l5ea7///8A////AP///wD///8AoaGhdbq6uv+/v7//mJiY3ZSUlB+RkZEFjo6OBYqK
        ih+Hh4flqKio/56env99fX11////AP///wD///8A////AKSkpAyhoaHbxMTE/76+vv+hoaH/lpaW/5OT
        k/+Xl5f/rq6u/66urv+EhITbgYGBCf///wD///8A////AP///wD///8ApKSkMKKiot68vLz/ysrK/8zM
        zP/Kysr/wsLC/62trf+MjIzeiYmJMP///wD///8A////AP///wD///8A////AP///wClpaUMo6OjgaCg
        oLqdnZ3MmpqazJeXl7qUlJSBkJCQDP///wD///8A////AP///wCAAQAAgAEAAIABAACAAQAAgAEAAIAB
        AACAAQAAgAEAAIABAACAAQAAw8MAAMPDAADAAwAAwAMAAOAHAADwDwAAKAAAACAAAABAAAAAAQAIAAAA
        AAAABAAAAAAAAAAAAAAAAQAAAAEAAAAAAACkpKQAqKioAKOjowCgoKAAnZ2dAJmZmQCampoAl5eXAJSU
        lACPj48AkZGRAKGhoQC8vLwAysrKAMzMzADExMQAwsLCAKurqwCurq4AioqKAI6OjgCJiYkAvr6+AISE
        hACCgoIAgYGBALq6ugC/v78Ah4eHAKmpqQB+fn4AfX19AMbGxgCTk5MAeXl5AHZ2dgBhw+EAiKCoAFq5
        3ABVuN8AUbXeAE2x3QBJrdwARqjXAHh4eABlfo0AMZnYAGDC4QDJ8/wAy/P9ANT2/gDY9P8A1/b/AOD4
        /wDN8fwAwu36AL3r+gArk9YA2vX/AMjz/AB13/kAieb9AJXn/wCa5f8AqO3/AHTV+QBZzPMAUMXxAE/I
        8QC76foAJI3VAFrC7wCZ4/8AvOv6AFi73wDH8v8Aw+/7AGrZ+ABWu+0AYb3vAJvn/wA1puIAS6ThAIri
        /wCQ4v8ASa3pADik4wBJxPAAtuf5AB6I1ADH8fwAfOL9AJDo/wCZ6f8APaPaADKf3wBUi7IAatD5AEbB
        8AAYg9MAU7feACqa4QC05fkAZdb4AEy27ABave8Alev/ADCX3QBNgqsAhOH/AEGp6QAyn+EAQr7vABN+
        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
        AGZmIHV1dmhoaGlpaWpqamtra21tbW5ubm9vb3BwcHFxcXJyclRUVHNzcwAAAAAAAGZmZmNjZ2hoaGlp
        aWpqamtra21tbW5ubm9vb3BwcHFxcXJyclRUVHRzcwAAAAAAACBmZmdnZ2hoaGlpaUdqamtrWmxtbW5u
        bm9vb3BwcHFxcXJyclRUVHNzdAAAAAAAAFdXV0lJSVhYWFlZWVpaWltbW2VcXF1dXVBQUF5eXkNDQ19f
        X1Q3VGFiYgAAAAAAAFdXH2NJSVhYWFlZWVpaWltbW1xcXF1dXVBQUF5eXmRERF9fX1ZUVGJiYgAAAAAA
        AFdXV0lJSVhYWFlZWVpaWjxbW1xcXF1dXVBQUF5eXkNERF9fX1ZWVmBhYgAAAAAAADg4OElJSUpKSktL
        S0xMTD09PU1NTU5OTk9PT1FRUVJSUlNTU1Y3VFVVVQAAAAAAADg4OElJSUpKSktLS0xMTD09PU1NTU5O
        Tk9PT1FRUVJSUlNTU1ZUN1VVVQAAAAAAADg4OElJSUpKSktLS0xMTD09PU1NTU5OTk9PUFFRUVJSUlNT
        Uzc0VFVVVQAAAAAAAEdISCgoKDk5OTo6Ojs7Ozw8PD4+Pj8/PzxAQEFBQUJCQkRERDc0NEZGRgAAAAAA
        AB04JigoKDk5OTo6Ojs7Ozw8PD4+Pj8/PzxAQEFBQUJCQkRERDQ0RUZGRgAAAAAAACYmOCcnKDk5OTo6
        Ojs7Ozw8PT4+Pj8/P0BAQEFBQUJCQkNERDQ0RUZGRgAAAAAAACYmJicnNjIyMioqKisrKywsLC0tLTMz
        LS4uLikpKS8vLzAwNzcwMDExMQAAAAAAACYmJicnMjIpMioqKysrKywsLC0tLS0zLSwuLikpKS8vLzAw
        NDQwMDUxMQAAAAAAACYmJicnKCgpKCoqKisrKywsLC0tLS0tLS4sLCkpKS8vLzAwMDAwMDExMQAAAAAA
        ABoaGhsbGwYGBwcHJR0dHR4eHh8fHyAgICEhISIiIhUWFhcXFyMjIyQkJAAAAAAAABoaGhsbGwYGHCUH
        Bx0dHR4eHh8fHyAgICEhISIiIhYWFhcXFyMjIyQkJAAAAAAAABoaGhsbGwYcHAcHBx0dHR4eHh8fHyAg
        ICEhISIiIhYWFhcXFyMjIyQkJAAAAAAAAAAAAAQEBBgYEQUGBgcHBwAAAAAAAAAAAAAAABMTExMUFBkZ
        GRcXFwAAAAAAAAAAAAAAAAQEBBgYEQUFBgcHBwAAAAAAAAAAAAAAABMTExMUFAgZGRcXFwAAAAAAAAAA
        AAAAAAQEBBERCgUFBQcHBwAAAAAAAAAAAAAAABMTExMVEw0ICBcXFwAAAAAAAAAAAAAAAAMDAxEREQIC
        AgYGBgAAAAAAAAAAAAAAABISEg4ODggNCBUVFQAAAAAAAAAAAAAAAAMDAxEREQICAgYFBgAAAAAAAAAA
        AAAAABISEg4ODggIDRUVFQAAAAAAAAAAAAAAAAMDAxEREQICAgYFBgAAAAAAAAAAAAAAABISEg4QEAgI
        CBUWFQAAAAAAAAAAAAAAAAICAg8PDwkJCQQEBQYGBgYGBgcHBw4ODhAQDggIAQMCAxMUFAAAAAAAAAAA
        AAAAAAICAg8PDwkJDAUEBAYFBQYHBgcOBw4ODhAQEAgICAMDAxMUFAAAAAAAAAAAAAAAAAICAg8PDwkJ
        CQQFBAUFBQYGBwcHBw4ODhAQEAgICAMDAxMUEwAAAAAAAAAAAAAAAAEBAQICAhEREQkJCQICAgUFBQYG
        BgUFBA0NDQ0NDRASEBISEgAAAAAAAAAAAAAAAAEBAQICAhERDAkJCQICAgUFBAYGBQUEBA0NDQ0NDRIQ
        EBMSEgAAAAAAAAAAAAAAAAEBAQICAhERDAkJCQMCAgUEBQUGBQUEBQ0NDQ0NDRISEhISEwAAAAAAAAAA
        AAAAAAAAAAEBAQICAgkPCQoKCgsLCwoKChEMDAgNCAcHDg4ODgAAAAAAAAAAAAAAAAAAAAAAAAEBAQEC
        Ag8PDwoKCgsLCwoKCgwMDA0NDQcODg4QDgAAAAAAAAAAAAAAAAAAAAAAAAEBAQECAQkJCQoKCgsLCwoK
        CgwMDA0NDQ4HBw4ODgAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQIBAgIDAgMDAwMEBAQEBQUFBgcHBwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgBAQECAQICAgMDAwQEAwUEBQUFBgYHBwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAEBAQEBAQIDAgMDAwQEBAQFBAUFBgcGBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>